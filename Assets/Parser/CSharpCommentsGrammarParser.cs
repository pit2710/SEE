//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpCommentsGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CSharpCommentsGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, WS=7, Comment=8, PARAM=9, 
		TEXT=10, SHORT_COMMENT=11, EQUALS=12, LineComment=13, Classname=14, TEXT_SKIP=15, 
		CURLY_BRACKET_OPEN=16, CURLY_BRACKET_CLOSE=17, CLASS_LINK=18, PARAMREF=19;
	public const int
		RULE_className = 0, RULE_classLink = 1, RULE_paramref = 2, RULE_param = 3, 
		RULE_summary = 4, RULE_return = 5, RULE_comment = 6, RULE_line_comment = 7, 
		RULE_claasDefinition = 8, RULE_start = 9;
	public static readonly string[] ruleNames = {
		"className", "classLink", "paramref", "param", "summary", "return", "comment", 
		"line_comment", "claasDefinition", "start"
	};

	private static readonly string[] _LiteralNames = {
		null, "'/// <summary>'", "'/// </summary>'", "'/// <returns>'", "'/// </returns>'", 
		"'</returns>'", "'public class'", null, null, null, null, "'//'", "'='", 
		null, null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "WS", "Comment", "PARAM", "TEXT", 
		"SHORT_COMMENT", "EQUALS", "LineComment", "Classname", "TEXT_SKIP", "CURLY_BRACKET_OPEN", 
		"CURLY_BRACKET_CLOSE", "CLASS_LINK", "PARAMREF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpCommentsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpCommentsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpCommentsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpCommentsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(CSharpCommentsGrammarParser.TEXT, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 0, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassLinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_LINK() { return GetToken(CSharpCommentsGrammarParser.CLASS_LINK, 0); }
		public ClassLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassLink(this);
		}
	}

	[RuleVersion(0)]
	public ClassLinkContext classLink() {
		ClassLinkContext _localctx = new ClassLinkContext(Context, State);
		EnterRule(_localctx, 2, RULE_classLink);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(CLASS_LINK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMREF() { return GetToken(CSharpCommentsGrammarParser.PARAMREF, 0); }
		public ParamrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParamref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParamref(this);
		}
	}

	[RuleVersion(0)]
	public ParamrefContext paramref() {
		ParamrefContext _localctx = new ParamrefContext(Context, State);
		EnterRule(_localctx, 4, RULE_paramref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(PARAMREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(CSharpCommentsGrammarParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(CSharpCommentsGrammarParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(CSharpCommentsGrammarParser.Comment, i);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 6, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comment) {
				{
				{
				State = 26;
				Match(Comment);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			Match(PARAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitSummary(this);
		}
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 8, RULE_summary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(T__0);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << Comment) | (1L << PARAM) | (1L << PARAMREF))) != 0)) {
				{
				{
				State = 35;
				comment();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 10, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__2);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << Comment) | (1L << PARAM) | (1L << TEXT) | (1L << CLASS_LINK) | (1L << PARAMREF))) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__2:
				case Comment:
				case PARAM:
				case PARAMREF:
					{
					State = 44;
					comment();
					}
					break;
				case TEXT:
					{
					State = 45;
					Match(TEXT);
					}
					break;
				case CLASS_LINK:
					{
					State = 46;
					classLink();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(CSharpCommentsGrammarParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(CSharpCommentsGrammarParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink() {
			return GetRuleContext<ClassLinkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext paramref() {
			return GetRuleContext<ParamrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 12, RULE_comment);
		try {
			int _alt;
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				summary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				@return();
				State = 56;
				Match(TEXT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58;
				Match(Comment);
				State = 60;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 59;
					classLink();
					}
					break;
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 62;
						Match(Comment);
						}
						} 
					}
					State = 67;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				paramref();
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 69;
						Match(TEXT);
						}
						} 
					}
					State = 74;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				param();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineComment() { return GetToken(CSharpCommentsGrammarParser.LineComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink() {
			return GetRuleContext<ClassLinkContext>(0);
		}
		public Line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterLine_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitLine_comment(this);
		}
	}

	[RuleVersion(0)]
	public Line_commentContext line_comment() {
		Line_commentContext _localctx = new Line_commentContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(LineComment);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLASS_LINK) {
				{
				State = 79;
				classLink();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClaasDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClaasDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_claasDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClaasDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClaasDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClaasDefinitionContext claasDefinition() {
		ClaasDefinitionContext _localctx = new ClaasDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_claasDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			summary();
			State = 83;
			Match(T__5);
			State = 84;
			className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClaasDefinitionContext[] claasDefinition() {
			return GetRuleContexts<ClaasDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClaasDefinitionContext claasDefinition(int i) {
			return GetRuleContext<ClaasDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_OPEN() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_CLOSE() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 18, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << Comment) | (1L << PARAM) | (1L << TEXT) | (1L << EQUALS) | (1L << CURLY_BRACKET_OPEN) | (1L << CURLY_BRACKET_CLOSE) | (1L << PARAMREF))) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 86;
					claasDefinition();
					}
					break;
				case 2:
					{
					State = 87;
					Match(TEXT);
					}
					break;
				case 3:
					{
					State = 88;
					Match(CURLY_BRACKET_OPEN);
					}
					break;
				case 4:
					{
					State = 89;
					Match(CURLY_BRACKET_CLOSE);
					}
					break;
				case 5:
					{
					State = 90;
					Match(EQUALS);
					}
					break;
				case 6:
					{
					State = 91;
					comment();
					}
					break;
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x64', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\a', '\x5', '\x1E', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '!', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\'', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'*', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x32', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x35', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '?', '\n', '\b', '\x3', '\b', '\a', '\b', '\x42', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x45', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'I', '\n', '\b', '\f', '\b', '\xE', '\b', 'L', '\v', '\b', '\x3', 
		'\b', '\x5', '\b', 'O', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'S', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '_', '\n', '\v', '\f', '\v', '\xE', '\v', '\x62', '\v', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x3', '\x3', '\x2', '\x6', '\a', 
		'\x2', 'l', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x1F', '\x3', '\x2', '\x2', '\x2', '\n', '$', '\x3', '\x2', '\x2', 
		'\x2', '\f', '-', '\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'P', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '`', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\f', '\x2', '\x2', '\x17', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x14', '\x2', '\x2', '\x19', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x15', '\x2', '\x2', '\x1B', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', '\n', '\x2', '\x2', 
		'\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\v', '\x2', '\x2', 
		'#', '\t', '\x3', '\x2', '\x2', '\x2', '$', '(', '\a', '\x3', '\x2', '\x2', 
		'%', '\'', '\x5', '\xE', '\b', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', 
		'\'', '*', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', 
		'\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x4', '\x2', 
		'\x2', ',', '\v', '\x3', '\x2', '\x2', '\x2', '-', '\x33', '\a', '\x5', 
		'\x2', '\x2', '.', '\x32', '\x5', '\xE', '\b', '\x2', '/', '\x32', '\a', 
		'\f', '\x2', '\x2', '\x30', '\x32', '\x5', '\x4', '\x3', '\x2', '\x31', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\t', '\x2', 
		'\x2', '\x2', '\x37', '\r', '\x3', '\x2', '\x2', '\x2', '\x38', 'O', '\x5', 
		'\n', '\x6', '\x2', '\x39', ':', '\x5', '\f', '\a', '\x2', ':', ';', '\a', 
		'\f', '\x2', '\x2', ';', 'O', '\x3', '\x2', '\x2', '\x2', '<', '>', '\a', 
		'\n', '\x2', '\x2', '=', '?', '\x5', '\x4', '\x3', '\x2', '>', '=', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x42', '\a', '\n', '\x2', '\x2', '\x41', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', 'O', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'J', '\x5', '\x6', '\x4', 
		'\x2', 'G', 'I', '\a', '\f', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x5', '\b', '\x5', 
		'\x2', 'N', '\x38', '\x3', '\x2', '\x2', '\x2', 'N', '\x39', '\x3', '\x2', 
		'\x2', '\x2', 'N', '<', '\x3', '\x2', '\x2', '\x2', 'N', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'R', '\a', '\xF', '\x2', '\x2', 'Q', 
		'S', '\x5', '\x4', '\x3', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x5', '\n', '\x6', '\x2', 'U', 'V', '\a', '\b', '\x2', 
		'\x2', 'V', 'W', '\x5', '\x2', '\x2', '\x2', 'W', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'X', '_', '\x5', '\x12', '\n', '\x2', 'Y', '_', '\a', '\f', 
		'\x2', '\x2', 'Z', '_', '\a', '\x12', '\x2', '\x2', '[', '_', '\a', '\x13', 
		'\x2', '\x2', '\\', '_', '\a', '\xE', '\x2', '\x2', ']', '_', '\x5', '\xE', 
		'\b', '\x2', '^', 'X', '\x3', '\x2', '\x2', '\x2', '^', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '^', 'Z', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x1F', '(', '\x31', '\x33', '>', '\x43', 'J', 'N', 'R', 
		'^', '`',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
