//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpCommentsGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CSharpCommentsGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, WS=15, Namespace=16, 
		Using=17, SEMICOLON=18, Comment=19, SHORT_COMMENT=20, TEXT=21, EQUALS=22, 
		LineComment=23, TEXT_SKIP=24, CURLY_BRACKET_OPEN=25, CURLY_BRACKET_CLOSE=26, 
		PARAMREF=27;
	public const int
		RULE_classLink = 0, RULE_parameter = 1, RULE_paramref = 2, RULE_summary = 3, 
		RULE_returnContent = 4, RULE_return = 5, RULE_comment = 6, RULE_comments = 7, 
		RULE_line_comment = 8, RULE_methodSignature = 9, RULE_methodScope = 10, 
		RULE_methodContent = 11, RULE_methodDeclaration = 12, RULE_scope = 13, 
		RULE_classContent = 14, RULE_classDefinition = 15, RULE_usingClause = 16, 
		RULE_namespaceDeclaration = 17, RULE_start = 18;
	public static readonly string[] ruleNames = {
		"classLink", "parameter", "paramref", "summary", "returnContent", "return", 
		"comment", "comments", "line_comment", "methodSignature", "methodScope", 
		"methodContent", "methodDeclaration", "scope", "classContent", "classDefinition", 
		"usingClause", "namespaceDeclaration", "start"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<see cref=\"'", "'\"/>'", "'<param name=\"'", "'\">'", "'</param>'", 
		"'/// <summary>'", "'/// </summary>'", "'/// <returns>'", "'/// </returns>'", 
		"'</returns>'", "','", "'<'", "'>'", "'class'", null, "'namespace'", "'using'", 
		"';'", null, null, null, "'='", null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WS", "Namespace", "Using", "SEMICOLON", "Comment", 
		"SHORT_COMMENT", "TEXT", "EQUALS", "LineComment", "TEXT_SKIP", "CURLY_BRACKET_OPEN", 
		"CURLY_BRACKET_CLOSE", "PARAMREF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpCommentsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpCommentsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpCommentsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpCommentsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ClassLinkContext : ParserRuleContext {
		public IToken linkID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ClassLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassLink(this);
		}
	}

	[RuleVersion(0)]
	public ClassLinkContext classLink() {
		ClassLinkContext _localctx = new ClassLinkContext(Context, State);
		EnterRule(_localctx, 0, RULE_classLink);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 39;
				_localctx.linkID = Match(TEXT);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken paramName;
		public IToken paramDescription;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 2, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(T__2);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 48;
				_localctx.paramName = Match(TEXT);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(T__3);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 55;
				_localctx.paramDescription = Match(TEXT);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMREF() { return GetToken(CSharpCommentsGrammarParser.PARAMREF, 0); }
		public ParamrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParamref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParamref(this);
		}
	}

	[RuleVersion(0)]
	public ParamrefContext paramref() {
		ParamrefContext _localctx = new ParamrefContext(Context, State);
		EnterRule(_localctx, 4, RULE_paramref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(PARAMREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitSummary(this);
		}
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_summary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__5);
			State = 66;
			comments();
			State = 67;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		public ReturnContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturnContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturnContent(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContentContext returnContent() {
		ReturnContentContext _localctx = new ReturnContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Comment) | (1L << TEXT))) != 0)) {
				{
				State = 72;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comment:
					{
					State = 69;
					comment();
					}
					break;
				case TEXT:
					{
					State = 70;
					Match(TEXT);
					}
					break;
				case T__0:
					{
					State = 71;
					classLink();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContentContext returnContent() {
			return GetRuleContext<ReturnContentContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 10, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__7);
			State = 78;
			returnContent();
			State = 79;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(CSharpCommentsGrammarParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 12, RULE_comment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(Comment);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
						{
						{
						State = 82;
						classLink();
						}
						}
						break;
					case T__2:
						{
						State = 83;
						parameter();
						}
						break;
					case TEXT:
						{
						{
						State = 84;
						Match(TEXT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext[] @return() {
			return GetRuleContexts<ReturnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return(int i) {
			return GetRuleContext<ReturnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext[] paramref() {
			return GetRuleContexts<ParamrefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext paramref(int i) {
			return GetRuleContext<ParamrefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComments(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_comments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << Comment) | (1L << PARAMREF))) != 0)) {
				{
				State = 101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 90;
					@return();
					}
					break;
				case 2:
					{
					State = 91;
					comment();
					}
					break;
				case 3:
					{
					State = 92;
					parameter();
					}
					break;
				case 4:
					{
					State = 93;
					@return();
					}
					break;
				case 5:
					{
					State = 94;
					paramref();
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TEXT) {
						{
						{
						State = 95;
						Match(TEXT);
						}
						}
						State = 100;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineComment() { return GetToken(CSharpCommentsGrammarParser.LineComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink() {
			return GetRuleContext<ClassLinkContext>(0);
		}
		public Line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterLine_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitLine_comment(this);
		}
	}

	[RuleVersion(0)]
	public Line_commentContext line_comment() {
		Line_commentContext _localctx = new Line_commentContext(Context, State);
		EnterRule(_localctx, 16, RULE_line_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(LineComment);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 107;
				classLink();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSignatureContext : ParserRuleContext {
		public IToken nameAndParameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public MethodSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodSignature(this);
		}
	}

	[RuleVersion(0)]
	public MethodSignatureContext methodSignature() {
		MethodSignatureContext _localctx = new MethodSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 110;
				_localctx.nameAndParameters = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << TEXT))) != 0)) ) {
					_localctx.nameAndParameters = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << TEXT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpCommentsGrammarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpCommentsGrammarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodScopeContext[] methodScope() {
			return GetRuleContexts<MethodScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodScopeContext methodScope(int i) {
			return GetRuleContext<MethodScopeContext>(i);
		}
		public MethodScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodScope(this);
		}
	}

	[RuleVersion(0)]
	public MethodScopeContext methodScope() {
		MethodScopeContext _localctx = new MethodScopeContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodScope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(CURLY_BRACKET_OPEN);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << SEMICOLON) | (1L << TEXT) | (1L << EQUALS) | (1L << CURLY_BRACKET_OPEN))) != 0)) {
				{
				State = 121;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 116;
					Match(TEXT);
					}
					break;
				case SEMICOLON:
					{
					State = 117;
					Match(SEMICOLON);
					}
					break;
				case EQUALS:
					{
					State = 118;
					Match(EQUALS);
					}
					break;
				case T__12:
					{
					State = 119;
					Match(T__12);
					}
					break;
				case CURLY_BRACKET_OPEN:
					{
					State = 120;
					methodScope();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpCommentsGrammarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpCommentsGrammarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodScopeContext[] methodScope() {
			return GetRuleContexts<MethodScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodScopeContext methodScope(int i) {
			return GetRuleContext<MethodScopeContext>(i);
		}
		public MethodContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodContent(this);
		}
	}

	[RuleVersion(0)]
	public MethodContentContext methodContent() {
		MethodContentContext _localctx = new MethodContentContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << SEMICOLON) | (1L << TEXT) | (1L << EQUALS) | (1L << CURLY_BRACKET_OPEN))) != 0)) {
				{
				State = 133;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 128;
					Match(TEXT);
					}
					break;
				case SEMICOLON:
					{
					State = 129;
					Match(SEMICOLON);
					}
					break;
				case EQUALS:
					{
					State = 130;
					Match(EQUALS);
					}
					break;
				case T__12:
					{
					State = 131;
					Match(T__12);
					}
					break;
				case CURLY_BRACKET_OPEN:
					{
					State = 132;
					methodScope();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature() {
			return GetRuleContext<MethodSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContentContext methodContent() {
			return GetRuleContext<MethodContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 138;
				summary();
				}
			}

			State = 141;
			methodSignature();
			State = 142;
			Match(CURLY_BRACKET_OPEN);
			State = 143;
			methodContent();
			State = 144;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 26, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(CURLY_BRACKET_OPEN);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << TEXT) | (1L << CURLY_BRACKET_OPEN))) != 0)) {
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						State = 147;
						scope();
						}
						break;
					case 2:
						{
						State = 148;
						methodDeclaration();
						}
						break;
					case 3:
						{
						State = 149;
						classDefinition();
						}
						break;
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TEXT) {
					{
					{
					State = 155;
					Match(TEXT);
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 163;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext[] methodSignature() {
			return GetRuleContexts<MethodSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature(int i) {
			return GetRuleContext<MethodSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpCommentsGrammarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpCommentsGrammarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext[] summary() {
			return GetRuleContexts<SummaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary(int i) {
			return GetRuleContext<SummaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ClassContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassContent(this);
		}
	}

	[RuleVersion(0)]
	public ClassContentContext classContent() {
		ClassContentContext _localctx = new ClassContentContext(Context, State);
		EnterRule(_localctx, 28, RULE_classContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 165;
					scope();
					}
					break;
				case 2:
					{
					State = 166;
					methodDeclaration();
					}
					break;
				case 3:
					{
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__5) {
						{
						State = 167;
						summary();
						}
					}

					State = 170;
					methodSignature();
					State = 171;
					Match(SEMICOLON);
					}
					break;
				case 4:
					{
					State = 174;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 173;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 176;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 5:
					{
					State = 178;
					Match(SEMICOLON);
					}
					break;
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << SEMICOLON) | (1L << TEXT) | (1L << CURLY_BRACKET_OPEN))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public IToken className;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContentContext classContent() {
			return GetRuleContext<ClassContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 183;
				summary();
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 186;
				Match(TEXT);
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(T__13);
			State = 193;
			_localctx.className = Match(TEXT);
			State = 194;
			Match(CURLY_BRACKET_OPEN);
			State = 195;
			classContent();
			State = 196;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CSharpCommentsGrammarParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpCommentsGrammarParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterUsingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitUsingClause(this);
		}
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_usingClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(Using);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 199;
				Match(TEXT);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			State = 204;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public IToken nameSpaceName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CSharpCommentsGrammarParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(Namespace);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 207;
				_localctx.nameSpaceName = Match(TEXT);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			State = 212;
			Match(CURLY_BRACKET_OPEN);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__13) | (1L << Namespace) | (1L << TEXT))) != 0)) {
				{
				State = 215;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Namespace:
					{
					State = 213;
					namespaceDeclaration();
					}
					break;
				case T__5:
				case T__13:
				case TEXT:
					{
					State = 214;
					classDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext[] usingClause() {
			return GetRuleContexts<UsingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext usingClause(int i) {
			return GetRuleContext<UsingClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_OPEN() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_CLOSE() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(CSharpCommentsGrammarParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(CSharpCommentsGrammarParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 36, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << Namespace) | (1L << Using) | (1L << Comment) | (1L << TEXT) | (1L << EQUALS) | (1L << CURLY_BRACKET_OPEN) | (1L << CURLY_BRACKET_CLOSE))) != 0)) {
				{
				State = 230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 222;
					classDefinition();
					}
					break;
				case 2:
					{
					State = 223;
					namespaceDeclaration();
					}
					break;
				case 3:
					{
					State = 224;
					methodDeclaration();
					}
					break;
				case 4:
					{
					State = 225;
					usingClause();
					}
					break;
				case 5:
					{
					State = 226;
					Match(CURLY_BRACKET_OPEN);
					}
					break;
				case 6:
					{
					State = 227;
					Match(CURLY_BRACKET_CLOSE);
					}
					break;
				case 7:
					{
					State = 228;
					Match(Comment);
					}
					break;
				case 8:
					{
					State = 229;
					Match(EQUALS);
					}
					break;
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\xEE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '+', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '.', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x34', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x37', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'>', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'K', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'N', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'X', '\n', '\b', '\f', '\b', '\xE', '\b', '[', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\x63', '\n', '\t', '\f', '\t', '\xE', '\t', '\x66', '\v', 
		'\t', '\a', '\t', 'h', '\n', '\t', '\f', '\t', '\xE', '\t', 'k', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'o', '\n', '\n', '\x3', '\v', 
		'\x6', '\v', 'r', '\n', '\v', '\r', '\v', '\xE', '\v', 's', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '|', '\n', '\f', '\f', '\f', '\xE', '\f', '\x7F', '\v', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x88', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x8B', '\v', '\r', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x99', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x9C', '\v', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x9F', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xA2', '\v', 
		'\xF', '\x5', '\xF', '\xA4', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xAB', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', 
		'\x10', '\xB1', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\xB2', '\x3', 
		'\x10', '\x6', '\x10', '\xB6', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 
		'\xB7', '\x3', '\x11', '\x5', '\x11', '\xBB', '\n', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xBE', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC1', 
		'\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', 
		'\xCB', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xCC', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\xD3', '\n', 
		'\x13', '\r', '\x13', '\xE', '\x13', '\xD4', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\xDA', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\xDD', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xE9', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\xEC', '\v', '\x14', '\x3', '\x14', '\x2', '\x2', 
		'\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', 
		'\x4', '\x3', '\x2', '\v', '\f', '\x4', '\x2', '\r', '\xF', '\x17', '\x17', 
		'\x2', '\x111', '\x2', '(', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', 'L', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'O', '\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'i', '\x3', '\x2', '\x2', '\x2', '\x12', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'q', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x18', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xB5', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\"', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD0', '\x3', '\x2', '\x2', '\x2', '&', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '(', ',', '\a', '\x3', '\x2', '\x2', ')', '+', '\a', '\x17', 
		'\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', '\x4', '\x2', '\x2', '\x30', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x35', '\a', '\x5', '\x2', '\x2', '\x32', 
		'\x34', '\a', '\x17', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '<', '\a', '\x6', '\x2', '\x2', '\x39', ';', '\a', '\x17', 
		'\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\a', '\x2', '\x2', '@', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x1D', '\x2', '\x2', '\x42', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\b', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x10', '\t', '\x2', '\x45', '\x46', '\a', '\t', 
		'\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 'G', 'K', '\x5', 
		'\xE', '\b', '\x2', 'H', 'K', '\a', '\x17', '\x2', '\x2', 'I', 'K', '\x5', 
		'\x2', '\x2', '\x2', 'J', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\v', '\x3', '\x2', '\x2', '\x2', 'N', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\n', '\x2', '\x2', 'P', 'Q', 
		'\x5', '\n', '\x6', '\x2', 'Q', 'R', '\t', '\x2', '\x2', '\x2', 'R', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'Y', '\a', '\x15', '\x2', '\x2', 'T', 
		'X', '\x5', '\x2', '\x2', '\x2', 'U', 'X', '\x5', '\x4', '\x3', '\x2', 
		'V', 'X', '\a', '\x17', '\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', 'h', '\x5', '\f', '\a', 
		'\x2', ']', 'h', '\x5', '\xE', '\b', '\x2', '^', 'h', '\x5', '\x4', '\x3', 
		'\x2', '_', 'h', '\x5', '\f', '\a', '\x2', '`', '\x64', '\x5', '\x6', 
		'\x4', '\x2', '\x61', '\x63', '\a', '\x17', '\x2', '\x2', '\x62', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\\', '\x3', '\x2', '\x2', '\x2', 'g', 
		']', '\x3', '\x2', '\x2', '\x2', 'g', '^', '\x3', '\x2', '\x2', '\x2', 
		'g', '_', '\x3', '\x2', '\x2', '\x2', 'g', '`', '\x3', '\x2', '\x2', '\x2', 
		'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x19', '\x2', 
		'\x2', 'm', 'o', '\x5', '\x2', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'r', '\t', '\x3', '\x2', '\x2', 'q', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'u', '}', '\a', '\x1B', '\x2', '\x2', 'v', '|', '\a', 
		'\x17', '\x2', '\x2', 'w', '|', '\a', '\x14', '\x2', '\x2', 'x', '|', 
		'\a', '\x18', '\x2', '\x2', 'y', '|', '\a', '\xF', '\x2', '\x2', 'z', 
		'|', '\x5', '\x16', '\f', '\x2', '{', 'v', '\x3', '\x2', '\x2', '\x2', 
		'{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 'x', '\x3', '\x2', '\x2', '\x2', 
		'{', 'y', '\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\a', '\x1C', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x88', '\a', '\x17', '\x2', '\x2', '\x83', '\x88', '\a', '\x14', 
		'\x2', '\x2', '\x84', '\x88', '\a', '\x18', '\x2', '\x2', '\x85', '\x88', 
		'\a', '\xF', '\x2', '\x2', '\x86', '\x88', '\x5', '\x16', '\f', '\x2', 
		'\x87', '\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8E', '\x5', '\b', '\x5', '\x2', '\x8D', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x14', '\v', '\x2', 
		'\x90', '\x91', '\a', '\x1B', '\x2', '\x2', '\x91', '\x92', '\x5', '\x18', 
		'\r', '\x2', '\x92', '\x93', '\a', '\x1C', '\x2', '\x2', '\x93', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\xA3', '\a', '\x1B', '\x2', '\x2', 
		'\x95', '\x99', '\x5', '\x1C', '\xF', '\x2', '\x96', '\x99', '\x5', '\x1A', 
		'\xE', '\x2', '\x97', '\x99', '\x5', ' ', '\x11', '\x2', '\x98', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\a', '\x17', 
		'\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\a', '\x1C', '\x2', '\x2', '\xA6', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xB6', '\x5', '\x1C', '\xF', '\x2', 
		'\xA8', '\xB6', '\x5', '\x1A', '\xE', '\x2', '\xA9', '\xAB', '\x5', '\b', 
		'\x5', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAD', '\x5', '\x14', '\v', '\x2', '\xAD', '\xAE', '\a', '\x14', 
		'\x2', '\x2', '\xAE', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', 
		'\a', '\x17', '\x2', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\a', '\x14', '\x2', '\x2', 
		'\xB5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\x5', '\b', '\x5', '\x2', 
		'\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', 
		'\a', '\x17', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\x10', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x17', 
		'\x2', '\x2', '\xC4', '\xC5', '\a', '\x1B', '\x2', '\x2', '\xC5', '\xC6', 
		'\x5', '\x1E', '\x10', '\x2', '\xC6', '\xC7', '\a', '\x1C', '\x2', '\x2', 
		'\xC7', '!', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\a', '\x13', 
		'\x2', '\x2', '\xC9', '\xCB', '\a', '\x17', '\x2', '\x2', '\xCA', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', 
		'\a', '\x14', '\x2', '\x2', '\xCF', '#', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD2', '\a', '\x12', '\x2', '\x2', '\xD1', '\xD3', '\a', '\x17', '\x2', 
		'\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xDB', '\a', '\x1B', '\x2', '\x2', '\xD7', '\xDA', '\x5', 
		'$', '\x13', '\x2', '\xD8', '\xDA', '\x5', ' ', '\x11', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x1C', '\x2', '\x2', '\xDF', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE9', '\x5', ' ', '\x11', '\x2', '\xE1', 
		'\xE9', '\x5', '$', '\x13', '\x2', '\xE2', '\xE9', '\x5', '\x1A', '\xE', 
		'\x2', '\xE3', '\xE9', '\x5', '\"', '\x12', '\x2', '\xE4', '\xE9', '\a', 
		'\x1B', '\x2', '\x2', '\xE5', '\xE9', '\a', '\x1C', '\x2', '\x2', '\xE6', 
		'\xE9', '\a', '\x15', '\x2', '\x2', '\xE7', '\xE9', '\a', '\x18', '\x2', 
		'\x2', '\xE8', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '#', 
		',', '\x35', '<', 'J', 'L', 'W', 'Y', '\x64', 'g', 'i', 'n', 's', '{', 
		'}', '\x87', '\x89', '\x8D', '\x98', '\x9A', '\xA0', '\xA3', '\xAA', '\xB2', 
		'\xB5', '\xB7', '\xBA', '\xBF', '\xCC', '\xD4', '\xD9', '\xDB', '\xE8', 
		'\xEA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
