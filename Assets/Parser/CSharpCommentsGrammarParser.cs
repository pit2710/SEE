//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpCommentsGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CSharpCommentsGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, WS=13, Namespace=14, Using=15, SEMICOLON=16, 
		Comment=17, TEXT=18, SHORT_COMMENT=19, EQUALS=20, LineComment=21, TEXT_SKIP=22, 
		CURLY_BRACKET_OPEN=23, CURLY_BRACKET_CLOSE=24, PARAMREF=25;
	public const int
		RULE_classLink = 0, RULE_parameter = 1, RULE_paramref = 2, RULE_summary = 3, 
		RULE_returnContent = 4, RULE_return = 5, RULE_comment = 6, RULE_comments = 7, 
		RULE_line_comment = 8, RULE_methodSignature = 9, RULE_methodContent = 10, 
		RULE_methodDeclaration = 11, RULE_scope = 12, RULE_classContent = 13, 
		RULE_classDefinition = 14, RULE_usingClause = 15, RULE_namespaceDeclaration = 16, 
		RULE_start = 17;
	public static readonly string[] ruleNames = {
		"classLink", "parameter", "paramref", "summary", "returnContent", "return", 
		"comment", "comments", "line_comment", "methodSignature", "methodContent", 
		"methodDeclaration", "scope", "classContent", "classDefinition", "usingClause", 
		"namespaceDeclaration", "start"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<see cref=\"'", "'\"/>'", "'<param name=\"'", "'\">'", "'</param>'", 
		"'/// <summary>'", "'/// </summary>'", "'/// <returns>'", "'/// </returns>'", 
		"'</returns>'", "','", "'class'", null, "'namespace'", "'using'", "';'", 
		null, null, "'//'", "'='", null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "Namespace", "Using", "SEMICOLON", "Comment", "TEXT", "SHORT_COMMENT", 
		"EQUALS", "LineComment", "TEXT_SKIP", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", 
		"PARAMREF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpCommentsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpCommentsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpCommentsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpCommentsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ClassLinkContext : ParserRuleContext {
		public IToken linkID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ClassLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassLink(this);
		}
	}

	[RuleVersion(0)]
	public ClassLinkContext classLink() {
		ClassLinkContext _localctx = new ClassLinkContext(Context, State);
		EnterRule(_localctx, 0, RULE_classLink);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(T__0);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 37;
				_localctx.linkID = Match(TEXT);
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken paramName;
		public IToken paramDescription;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 2, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__2);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 46;
				_localctx.paramName = Match(TEXT);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(T__3);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 53;
				_localctx.paramDescription = Match(TEXT);
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMREF() { return GetToken(CSharpCommentsGrammarParser.PARAMREF, 0); }
		public ParamrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParamref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParamref(this);
		}
	}

	[RuleVersion(0)]
	public ParamrefContext paramref() {
		ParamrefContext _localctx = new ParamrefContext(Context, State);
		EnterRule(_localctx, 4, RULE_paramref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(PARAMREF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitSummary(this);
		}
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_summary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__5);
			State = 64;
			comments();
			State = 65;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		public ReturnContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturnContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturnContent(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContentContext returnContent() {
		ReturnContentContext _localctx = new ReturnContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Comment) | (1L << TEXT))) != 0)) {
				{
				State = 70;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Comment:
					{
					State = 67;
					comment();
					}
					break;
				case TEXT:
					{
					State = 68;
					Match(TEXT);
					}
					break;
				case T__0:
					{
					State = 69;
					classLink();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContentContext returnContent() {
			return GetRuleContext<ReturnContentContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 10, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__7);
			State = 76;
			returnContent();
			State = 77;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(CSharpCommentsGrammarParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 12, RULE_comment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Comment);
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 83;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
						{
						{
						State = 80;
						classLink();
						}
						}
						break;
					case T__2:
						{
						State = 81;
						parameter();
						}
						break;
					case TEXT:
						{
						{
						State = 82;
						Match(TEXT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext[] @return() {
			return GetRuleContexts<ReturnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return(int i) {
			return GetRuleContext<ReturnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext[] paramref() {
			return GetRuleContexts<ParamrefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext paramref(int i) {
			return GetRuleContext<ParamrefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComments(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_comments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__7) | (1L << Comment) | (1L << PARAMREF))) != 0)) {
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 88;
					@return();
					}
					break;
				case 2:
					{
					State = 89;
					comment();
					}
					break;
				case 3:
					{
					State = 90;
					parameter();
					}
					break;
				case 4:
					{
					State = 91;
					@return();
					}
					break;
				case 5:
					{
					State = 92;
					paramref();
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TEXT) {
						{
						{
						State = 93;
						Match(TEXT);
						}
						}
						State = 98;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineComment() { return GetToken(CSharpCommentsGrammarParser.LineComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink() {
			return GetRuleContext<ClassLinkContext>(0);
		}
		public Line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterLine_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitLine_comment(this);
		}
	}

	[RuleVersion(0)]
	public Line_commentContext line_comment() {
		Line_commentContext _localctx = new Line_commentContext(Context, State);
		EnterRule(_localctx, 16, RULE_line_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(LineComment);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 105;
				classLink();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSignatureContext : ParserRuleContext {
		public IToken nameAndParameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public MethodSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodSignature(this);
		}
	}

	[RuleVersion(0)]
	public MethodSignatureContext methodSignature() {
		MethodSignatureContext _localctx = new MethodSignatureContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 108;
				_localctx.nameAndParameters = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==TEXT) ) {
					_localctx.nameAndParameters = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__10 || _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpCommentsGrammarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpCommentsGrammarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public MethodContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodContent(this);
		}
	}

	[RuleVersion(0)]
	public MethodContentContext methodContent() {
		MethodContentContext _localctx = new MethodContentContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << TEXT) | (1L << EQUALS))) != 0)) {
				{
				State = 120;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 114;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 113;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 116;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case SEMICOLON:
					{
					State = 118;
					Match(SEMICOLON);
					}
					break;
				case EQUALS:
					{
					State = 119;
					Match(EQUALS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature() {
			return GetRuleContext<MethodSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContentContext methodContent() {
			return GetRuleContext<MethodContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 125;
				summary();
				}
			}

			State = 128;
			methodSignature();
			State = 129;
			Match(CURLY_BRACKET_OPEN);
			State = 130;
			methodContent();
			State = 131;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(CURLY_BRACKET_OPEN);
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << TEXT) | (1L << CURLY_BRACKET_OPEN))) != 0)) {
					{
					State = 137;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						State = 134;
						scope();
						}
						break;
					case 2:
						{
						State = 135;
						methodDeclaration();
						}
						break;
					case 3:
						{
						State = 136;
						classDefinition();
						}
						break;
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TEXT) {
					{
					{
					State = 142;
					Match(TEXT);
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 150;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext[] scope() {
			return GetRuleContexts<ScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope(int i) {
			return GetRuleContext<ScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext[] methodSignature() {
			return GetRuleContexts<MethodSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature(int i) {
			return GetRuleContext<MethodSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpCommentsGrammarParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpCommentsGrammarParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext[] summary() {
			return GetRuleContexts<SummaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary(int i) {
			return GetRuleContext<SummaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ClassContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassContent(this);
		}
	}

	[RuleVersion(0)]
	public ClassContentContext classContent() {
		ClassContentContext _localctx = new ClassContentContext(Context, State);
		EnterRule(_localctx, 26, RULE_classContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 152;
					scope();
					}
					break;
				case 2:
					{
					State = 153;
					methodDeclaration();
					}
					break;
				case 3:
					{
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__5) {
						{
						State = 154;
						summary();
						}
					}

					State = 157;
					methodSignature();
					State = 158;
					Match(SEMICOLON);
					}
					break;
				case 4:
					{
					State = 161;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 160;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 163;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 5:
					{
					State = 165;
					Match(SEMICOLON);
					}
					break;
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << SEMICOLON) | (1L << TEXT) | (1L << CURLY_BRACKET_OPEN))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public IToken className;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContentContext classContent() {
			return GetRuleContext<ClassContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 170;
				summary();
				}
			}

			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 173;
				Match(TEXT);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(T__11);
			State = 180;
			_localctx.className = Match(TEXT);
			State = 181;
			Match(CURLY_BRACKET_OPEN);
			State = 182;
			classContent();
			State = 183;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CSharpCommentsGrammarParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CSharpCommentsGrammarParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterUsingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitUsingClause(this);
		}
	}

	[RuleVersion(0)]
	public UsingClauseContext usingClause() {
		UsingClauseContext _localctx = new UsingClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_usingClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(Using);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186;
				Match(TEXT);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			State = 191;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public IToken nameSpaceName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CSharpCommentsGrammarParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE() { return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Namespace);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 194;
				_localctx.nameSpaceName = Match(TEXT);
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			State = 199;
			Match(CURLY_BRACKET_OPEN);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__11) | (1L << Namespace) | (1L << TEXT))) != 0)) {
				{
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Namespace:
					{
					State = 200;
					namespaceDeclaration();
					}
					break;
				case T__5:
				case T__11:
				case TEXT:
					{
					State = 201;
					classDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(CURLY_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext[] usingClause() {
			return GetRuleContexts<UsingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingClauseContext usingClause(int i) {
			return GetRuleContext<UsingClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_OPEN() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_OPEN(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CURLY_BRACKET_CLOSE() { return GetTokens(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_BRACKET_CLOSE(int i) {
			return GetToken(CSharpCommentsGrammarParser.CURLY_BRACKET_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(CSharpCommentsGrammarParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(CSharpCommentsGrammarParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(CSharpCommentsGrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(CSharpCommentsGrammarParser.EQUALS, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 34, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__11) | (1L << Namespace) | (1L << Using) | (1L << Comment) | (1L << TEXT) | (1L << EQUALS) | (1L << CURLY_BRACKET_OPEN) | (1L << CURLY_BRACKET_CLOSE))) != 0)) {
				{
				State = 217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 209;
					classDefinition();
					}
					break;
				case 2:
					{
					State = 210;
					namespaceDeclaration();
					}
					break;
				case 3:
					{
					State = 211;
					methodDeclaration();
					}
					break;
				case 4:
					{
					State = 212;
					usingClause();
					}
					break;
				case 5:
					{
					State = 213;
					Match(CURLY_BRACKET_OPEN);
					}
					break;
				case 6:
					{
					State = 214;
					Match(CURLY_BRACKET_CLOSE);
					}
					break;
				case 7:
					{
					State = 215;
					Match(Comment);
					}
					break;
				case 8:
					{
					State = 216;
					Match(EQUALS);
					}
					break;
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\xE1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ')', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', ',', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x32', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x35', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x39', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '<', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'I', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'L', '\v', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'V', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'Y', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x61', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x64', '\v', '\t', '\a', '\t', '\x66', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 'i', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'm', '\n', '\n', '\x3', '\v', '\x6', '\v', 'p', '\n', '\v', '\r', 
		'\v', '\xE', '\v', 'q', '\x3', '\f', '\x6', '\f', 'u', '\n', '\f', '\r', 
		'\f', '\xE', '\f', 'v', '\x3', '\f', '\x3', '\f', '\a', '\f', '{', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '~', '\v', '\f', '\x3', '\r', '\x5', '\r', 
		'\x81', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x8C', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x8F', '\v', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x92', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x95', '\v', '\xE', '\x5', '\xE', '\x97', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x9E', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x6', '\xF', '\xA4', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\xA5', 
		'\x3', '\xF', '\x6', '\xF', '\xA9', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\xAA', '\x3', '\x10', '\x5', '\x10', '\xAE', '\n', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xB1', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xB4', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', 
		'\xBE', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xBF', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\xC6', '\n', 
		'\x12', '\r', '\x12', '\xE', '\x12', '\xC7', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\xCD', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\xD0', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xDC', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xDF', '\v', '\x13', '\x3', '\x13', '\x2', '\x2', 
		'\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', 
		'\x4', '\x3', '\x2', '\v', '\f', '\x4', '\x2', '\r', '\r', '\x14', '\x14', 
		'\x2', '\xFE', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'J', '\x3', '\x2', '\x2', '\x2', '\f', 
		'M', '\x3', '\x2', '\x2', '\x2', '\xE', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'g', '\x3', '\x2', '\x2', '\x2', '\x12', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'o', '\x3', '\x2', '\x2', '\x2', '\x16', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xAD', '\x3', '\x2', '\x2', '\x2', ' ', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xC3', '\x3', '\x2', '\x2', '\x2', '$', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '&', '*', '\a', '\x3', '\x2', '\x2', '\'', ')', '\a', 
		'\x14', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', ',', 
		'\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', 
		'.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '\x33', '\a', '\x5', '\x2', 
		'\x2', '\x30', '\x32', '\a', '\x14', '\x2', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', ':', '\a', '\x6', '\x2', '\x2', '\x37', '\x39', 
		'\a', '\x14', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\a', '\x2', 
		'\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x1B', 
		'\x2', '\x2', '@', '\a', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', 
		'\b', '\x2', '\x2', '\x42', '\x43', '\x5', '\x10', '\t', '\x2', '\x43', 
		'\x44', '\a', '\t', '\x2', '\x2', '\x44', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'I', '\x5', '\xE', '\b', '\x2', '\x46', 'I', '\a', '\x14', '\x2', 
		'\x2', 'G', 'I', '\x5', '\x2', '\x2', '\x2', 'H', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\a', '\n', '\x2', '\x2', 'N', 'O', '\x5', '\n', '\x6', '\x2', 'O', 
		'P', '\t', '\x2', '\x2', '\x2', 'P', '\r', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'W', '\a', '\x13', '\x2', '\x2', 'R', 'V', '\x5', '\x2', '\x2', '\x2', 
		'S', 'V', '\x5', '\x4', '\x3', '\x2', 'T', 'V', '\a', '\x14', '\x2', '\x2', 
		'U', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', '\xF', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\x66', '\x5', '\f', '\a', '\x2', '[', '\x66', '\x5', '\xE', 
		'\b', '\x2', '\\', '\x66', '\x5', '\x4', '\x3', '\x2', ']', '\x66', '\x5', 
		'\f', '\a', '\x2', '^', '\x62', '\x5', '\x6', '\x4', '\x2', '_', '\x61', 
		'\a', '\x14', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x65', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\\', '\x3', '\x2', '\x2', '\x2', '\x65', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '^', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x11', '\x3', '\x2', '\x2', '\x2', 'i', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'l', '\a', '\x17', '\x2', '\x2', 'k', 
		'm', '\x5', '\x2', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\t', '\x3', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\a', '\x14', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', '{', '\x3', '\x2', 
		'\x2', '\x2', 'x', '{', '\a', '\x12', '\x2', '\x2', 'y', '{', '\a', '\x16', 
		'\x2', '\x2', 'z', 't', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x17', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x81', '\x5', '\b', '\x5', '\x2', '\x80', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5', 
		'\x14', '\v', '\x2', '\x83', '\x84', '\a', '\x19', '\x2', '\x2', '\x84', 
		'\x85', '\x5', '\x16', '\f', '\x2', '\x85', '\x86', '\a', '\x1A', '\x2', 
		'\x2', '\x86', '\x19', '\x3', '\x2', '\x2', '\x2', '\x87', '\x96', '\a', 
		'\x19', '\x2', '\x2', '\x88', '\x8C', '\x5', '\x1A', '\xE', '\x2', '\x89', 
		'\x8C', '\x5', '\x18', '\r', '\x2', '\x8A', '\x8C', '\x5', '\x1E', '\x10', 
		'\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x92', '\a', '\x14', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x96', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x1A', '\x2', '\x2', '\x99', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\xA9', '\x5', '\x1A', '\xE', '\x2', '\x9B', '\xA9', '\x5', 
		'\x18', '\r', '\x2', '\x9C', '\x9E', '\x5', '\b', '\x5', '\x2', '\x9D', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', 
		'\x14', '\v', '\x2', '\xA0', '\xA1', '\a', '\x12', '\x2', '\x2', '\xA1', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\a', '\x14', '\x2', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA9', '\a', '\x12', '\x2', '\x2', '\xA8', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAE', '\x5', '\b', '\x5', '\x2', '\xAD', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\a', '\x14', '\x2', 
		'\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'\xE', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x14', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', '\x19', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x1C', '\xF', 
		'\x2', '\xB9', '\xBA', '\a', '\x1A', '\x2', '\x2', '\xBA', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBD', '\a', '\x11', '\x2', '\x2', '\xBC', 
		'\xBE', '\a', '\x14', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x12', '\x2', 
		'\x2', '\xC2', '!', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\a', 
		'\x10', '\x2', '\x2', '\xC4', '\xC6', '\a', '\x14', '\x2', '\x2', '\xC5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCE', '\a', '\x19', '\x2', '\x2', '\xCA', '\xCD', '\x5', '\"', '\x12', 
		'\x2', '\xCB', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x1A', '\x2', '\x2', '\xD2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xDC', '\x5', '\x1E', '\x10', '\x2', '\xD4', '\xDC', '\x5', 
		'\"', '\x12', '\x2', '\xD5', '\xDC', '\x5', '\x18', '\r', '\x2', '\xD6', 
		'\xDC', '\x5', ' ', '\x11', '\x2', '\xD7', '\xDC', '\a', '\x19', '\x2', 
		'\x2', '\xD8', '\xDC', '\a', '\x1A', '\x2', '\x2', '\xD9', '\xDC', '\a', 
		'\x13', '\x2', '\x2', '\xDA', '\xDC', '\a', '\x16', '\x2', '\x2', '\xDB', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\"', '*', '\x33', 
		':', 'H', 'J', 'U', 'W', '\x62', '\x65', 'g', 'l', 'q', 'v', 'z', '|', 
		'\x80', '\x8B', '\x8D', '\x93', '\x96', '\x9D', '\xA5', '\xA8', '\xAA', 
		'\xAD', '\xB2', '\xBF', '\xC7', '\xCC', '\xCE', '\xDB', '\xDD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
